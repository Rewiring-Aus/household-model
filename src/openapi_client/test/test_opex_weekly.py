# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.opex_weekly import OpexWeekly  # noqa: E501

class TestOpexWeekly(unittest.TestCase):
    """OpexWeekly unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OpexWeekly:
        """Test OpexWeekly
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OpexWeekly`
        """
        model = OpexWeekly()  # noqa: E501
        if include_optional:
            return OpexWeekly(
                grid_volume_costs = 1.337,
                other_energy_costs = 1.337,
                other_energy_costs_by_fuel_type = openapi_client.models.opex_weekly_other_energy_costs_by_fuel_type.OpexWeekly_otherEnergyCostsByFuelType(
                    gas = 1.337, 
                    lpg = 1.337, 
                    wood = 1.337, 
                    petrol = 1.337, 
                    diesel = 1.337, ),
                fixed_costs = 1.337,
                fixed_costs_by_fuel_type = openapi_client.models.opex_weekly_fixed_costs_by_fuel_type.OpexWeekly_fixedCostsByFuelType(
                    gas = 1.337, 
                    lpg = 1.337, 
                    electricity = 1.337, ),
                revenue_from_solar_export = 1.337
            )
        else:
            return OpexWeekly(
        )
        """

    def testOpexWeekly(self):
        """Test OpexWeekly"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
