# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class OpexWeeklyOtherEnergyCostsByFuelType(BaseModel):
    """
    OpexWeeklyOtherEnergyCostsByFuelType
    """
    gas: Optional[Union[StrictFloat, StrictInt]] = None
    lpg: Optional[Union[StrictFloat, StrictInt]] = None
    wood: Optional[Union[StrictFloat, StrictInt]] = None
    petrol: Optional[Union[StrictFloat, StrictInt]] = None
    diesel: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["gas", "lpg", "wood", "petrol", "diesel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpexWeeklyOtherEnergyCostsByFuelType:
        """Create an instance of OpexWeeklyOtherEnergyCostsByFuelType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpexWeeklyOtherEnergyCostsByFuelType:
        """Create an instance of OpexWeeklyOtherEnergyCostsByFuelType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpexWeeklyOtherEnergyCostsByFuelType.parse_obj(obj)

        _obj = OpexWeeklyOtherEnergyCostsByFuelType.parse_obj({
            "gas": obj.get("gas"),
            "lpg": obj.get("lpg"),
            "wood": obj.get("wood"),
            "petrol": obj.get("petrol"),
            "diesel": obj.get("diesel")
        })
        return _obj


