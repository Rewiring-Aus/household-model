# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from openapi_client.models.opex_weekly_fixed_costs_by_fuel_type import OpexWeeklyFixedCostsByFuelType
from openapi_client.models.opex_weekly_other_energy_costs_by_fuel_type import OpexWeeklyOtherEnergyCostsByFuelType

class OpexWeekly(BaseModel):
    """
    OpexWeekly
    """
    grid_volume_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gridVolumeCosts")
    other_energy_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="otherEnergyCosts")
    other_energy_costs_by_fuel_type: Optional[OpexWeeklyOtherEnergyCostsByFuelType] = Field(default=None, alias="otherEnergyCostsByFuelType")
    fixed_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedCosts")
    fixed_costs_by_fuel_type: Optional[OpexWeeklyFixedCostsByFuelType] = Field(default=None, alias="fixedCostsByFuelType")
    revenue_from_solar_export: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="revenueFromSolarExport")
    __properties = ["gridVolumeCosts", "otherEnergyCosts", "otherEnergyCostsByFuelType", "fixedCosts", "fixedCostsByFuelType", "revenueFromSolarExport"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpexWeekly:
        """Create an instance of OpexWeekly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of other_energy_costs_by_fuel_type
        if self.other_energy_costs_by_fuel_type:
            _dict['otherEnergyCostsByFuelType'] = self.other_energy_costs_by_fuel_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixed_costs_by_fuel_type
        if self.fixed_costs_by_fuel_type:
            _dict['fixedCostsByFuelType'] = self.fixed_costs_by_fuel_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpexWeekly:
        """Create an instance of OpexWeekly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpexWeekly.parse_obj(obj)

        _obj = OpexWeekly.parse_obj({
            "grid_volume_costs": obj.get("gridVolumeCosts"),
            "other_energy_costs": obj.get("otherEnergyCosts"),
            "other_energy_costs_by_fuel_type": OpexWeeklyOtherEnergyCostsByFuelType.from_dict(obj.get("otherEnergyCostsByFuelType")) if obj.get("otherEnergyCostsByFuelType") is not None else None,
            "fixed_costs": obj.get("fixedCosts"),
            "fixed_costs_by_fuel_type": OpexWeeklyFixedCostsByFuelType.from_dict(obj.get("fixedCostsByFuelType")) if obj.get("fixedCostsByFuelType") is not None else None,
            "revenue_from_solar_export": obj.get("revenueFromSolarExport")
        })
        return _obj


